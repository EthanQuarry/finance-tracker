generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Schema Prisma
model User {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email     String  @unique
  firstName String
  lastName  String
  password  String
  isAdmin   Boolean @default(false)

  accountAdded Boolean @default(false)

  income     Income[]
  expense    Expense[]
  subIncome  SubIncome[]
  SubExpense SubExpense[]
}

model Expense {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name   String
  user   User   @relation(fields: [userId], references: [id])
  userId String


  amount Int @default(0)

  note String?

  deleted Boolean @default(false)

  subExpenses SubExpense[]

  @@index([userId, id])
}

model SubExpense {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  expenseId String
  expense   Expense @relation(fields: [expenseId], references: [id])

  assigned  Int @default(0)
  activity  Int @default(0)
  available Int @default(0)

  note String?



  deleted Boolean @default(false)

  @@index([userId])
}

model Target {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  spending Boolean @default(false)
  saving   Boolean @default(false)
  debt     Boolean @default(false)

  requiredAmount Int
  dateRequired   String
}

model Income {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String

  userId String
  user   User   @relation(fields: [userId], references: [id])

  amount Int @default(0)

  note      String?
  subIncomes SubIncome[]

  @@index([userId])
}

model SubIncome {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String

  userId   String
  user     User   @relation(fields: [userId], references: [id])
  incomeId String
  income   Income @relation(fields: [incomeId], references: [id])

  amount Int @default(0)

  note      String?

  @@index([userId])
}
