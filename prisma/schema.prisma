generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Schema Prisma 
model Admin {
  id        String     @id @default(uuid())
  firstName String  @default("admin")
  lastName  String?
  email     String  @unique @default("admin@gmail.com")

  createdAt DateTime @default(now())
  isAdmin   Boolean  @default(true)
}

model User {
  id        String      @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email     String  @unique
  firstName String
  lastName  String
  password  String
  isAdmin   Boolean @default(false)

  income    Income[]
  category  Category[]
  unique    Unique[]
}

model Category {
  id        String      @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name      String
  user      User @relation(fields: [userId], references: [id])
  userId    String
  unique    Unique[]

  amount Int @default(0)

  note     String?

  deleted Boolean @ default(false)

  @@unique([userId, name])
  @@index([userId, id])
}


model Unique {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name   String

  userId   String
  user     User    @relation(fields: [userId], references: [id] , onDelete: NoAction, onUpdate: NoAction)
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id] )
  target Target[]


  assigned Int @default(0)
  activity Int @default(0)
  available Int @default(0)
  
  note     String?

  deleted Boolean   @default(false)

  @@index([userId])
}


model Target {
  id String @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  uniqueId String
  name Unique @relation(fields: [uniqueId], references: [id])

  spending Boolean @default(false)
  saving Boolean @default(false)
  debt Boolean @default(false)

  requiredAmount Int
  dateRequired String
}

model Income {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name   String

  userId   String
  user     User    @relation(fields: [userId], references: [id])

  amount Int @default(0)
  
  note     String?

  @@index([userId])
}